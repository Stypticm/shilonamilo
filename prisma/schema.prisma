generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id   String @id @default(uuid())
  name String @db.VarChar(255)
}

model Favorite {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String? @db.VarChar(255)
  Lot    Lot?    @relation(fields: [lotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lotId  String? @db.VarChar(255)

  createdAt DateTime? @default(now()) @db.Timestamp(6)
}

model Lot {
  id String @id @default(uuid())

  userId        String?   @db.VarChar(255)
  name          String?   @db.VarChar(255)
  category      String?   @db.VarChar(255)
  description   String?   @db.VarChar(255)
  exchangeOffer String?   @db.VarChar(255)
  country       String?   @db.VarChar(255)
  city          String?   @db.VarChar(255)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  photolot      String?   @db.VarChar(512)

  addedcategory    Boolean?
  addeddescription Boolean?
  addedlocation    Boolean?

  Favorite         Favorite[]
  Proposal         Proposal[] @relation("LotProposals")
  ReceivedProposal Proposal[] @relation("LotOffers")
  User             User?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id        String     @id @unique
  email     String     @db.VarChar(255)
  firstname String     @db.VarChar(255)
  photourl  String?    @db.VarChar(255)
  createdAt DateTime?  @default(now()) @db.Timestamp(6)
  Favorite  Favorite[]
  Lot       Lot[]
}

model Proposal {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)

  lotId String? @db.VarChar(255)
  lot   Lot?    @relation("LotProposals", fields: [lotId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  offeredLotId String? @db.VarChar(255)
  offeredLot   Lot?    @relation("LotOffers", fields: [offeredLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId        String? @db.VarChar(255)
  userIdOffered String? @db.VarChar(255)

  status String? @db.VarChar(255)
}
